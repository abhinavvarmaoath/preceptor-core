{"name":"Preceptor-core","tagline":"Shared library for the preceptor test-runner and aggregator","body":"Preceptor-Core\r\n==============\r\n\r\nShared library for the preceptor test-runner and aggregator.\r\n\r\n\r\n[![Build Status](https://secure.travis-ci.org/yahoo/preceptor-core.png)](http://travis-ci.org/yahoo/preceptor-core)\r\n[![npm version](https://badge.fury.io/js/preceptor-core.svg)](http://badge.fury.io/js/preceptor-core)\r\n\r\n[![NPM](https://nodei.co/npm/preceptor-core.png?downloads=true)](https://nodei.co/npm/preceptor-core/)\r\n\r\n\r\n**Table of Contents**\r\n* [Installation](#installation)\r\n* [Usage](#usage)\r\n    * [Base-Object](#base-object)\r\n        * [Static Properties](#static-properties---defined-on-the-constructor)\r\n        * [Dynamic Properties](#dynamic-properties---defined-on-this-or-prototype)\r\n    * [Utils](#utils)\r\n        * [extendApply](#extendapply)\r\n        * [deepExtend](#deepextend)\r\n        * [combine](#combine)\r\n        * [superWrapper](#superwrapper)\r\n* [API-Documentation](#api-documentation)\r\n* [Tests](#tests)\r\n* [Third-party libraries](#third-party-libraries)\r\n* [License](#license)\r\n\r\n\r\n##Installation\r\n\r\nInstall this module with the following command:\r\n```shell\r\nnpm install preceptor-core\r\n```\r\n\r\nAdd the module to your ```package.json``` dependencies:\r\n```shell\r\nnpm install --save preceptor-core\r\n```\r\nAdd the module to your ```package.json``` dev-dependencies:\r\n```shell\r\nnpm install --save-dev preceptor-core\r\n```\r\n\r\nRequire the module in your source-code:\r\n```javascript\r\nvar core = require('preceptor-core');\r\n```\r\n\r\n##Usage\r\n\r\nThe module exposes two objects:\r\n\r\n* ```Base``` - A base object that every preceptor object should inherit from. See below for more information.\r\n* ```utils``` - Frequently used utility functions\r\n\r\n\r\n###Base-Object\r\n\r\nThe Base object inherits all features of the EventEmitter and exposes a couple static and dynamic properties:\r\n\r\n\r\n####Static Properties - Defined on the constructor\r\n#####```TYPE``` {string}\r\nDescribes the type of the object. The default value is \"Base\".\r\nOverwrite this value in sub-objects to help in debugging as the will appear as descriptor of an object.\r\n\r\n#####```extend``` {function}\r\nExtends the current object by creating a new constructor and inheriting all static and dynamic properties. Every function will be wrapped in a ```__super``` wrapper that will make the ```__super``` function available in every method call. (See below for more information!)\r\n\r\n*Parameters:*\r\n* ```constructFn``` {function} - The function to be used as constructor. This parameter is optional. When no function is given, then a generic function is used.\r\n* ```prototypeProperties``` {object} - Properties that should be assigned the the ```prototype``` property of the constructor. This parameter is required.\r\n* ```staticProperties``` {object} - Properties that should be assigned to the constructor. This parameter is optional.\r\n\r\n#####```toString``` {function}\r\nDescribes the object. By default, the format is: ```[TYPE]``` where by ```TYPE``` is the value assigned to the constructor.\r\n\r\n#####```__parent``` {object}\r\nThis is a reference to the parent prototype.\r\n\r\n\r\n\r\n####Dynamic Properties - Defined on ```this``` or ```prototype```\r\n#####```uniqueId``` {string}\r\nEvery instance of an object gets a unique-id assigned.\r\n\r\n#####```NAME``` {string}\r\nDescribes the instance. The default value is \"unnamed\".\r\nOverwrite this value in instances to help to help identifying instances during run-time.\r\n\r\n#####```toString``` {function}\r\nDescribes the instance. By default, the format is: ```[TYPE::NAME(uniqueId)]``` where by ```TYPE``` is the value assigned to the constructor, and ```NAME``` is the value assigned to the instance.\r\n\r\n#####```__super``` {function}\r\nAccessor function to access the parent implementation of a method. Should there be no parent method, then this method is an empty function.\r\n\r\n\r\n####Example\r\n\r\n```javascript\r\nvar Base = require('preceptor-core').Base;\r\n\r\n/**\r\n * @class Pet\r\n * @extends Base\r\n * @properties {string} _type Type of pet\r\n * @properties {string} _name Name of pet\r\n */\r\nvar Pet = Base.extend(\r\n\r\n    /**\r\n     * Constructor of Pet\r\n     *\r\n     * @constructor\r\n     * @param {string} type Type of pet\r\n     * @param {string} name Name of pet\r\n     */\r\n     function (type, name) {\r\n\r\n        // Call the parent constructor\r\n        this.__super();\r\n\r\n        // Save property on the current object\r\n        this._type = type;\r\n        this._name = name;\r\n\r\n        // Add instance descriptor\r\n        this.NAME = type + ':' + name;\r\n\r\n        // Define here all dynamic values, values that should not be shared between multiple instances of \"Pet\".\r\n    },\r\n\r\n    /** @lends Pet.prototype */\r\n    { // Properties assigned to the prototype of \"Pet\"\r\n\r\n        /**\r\n         * Make sound of pet\r\n         *\r\n         * @param {string} sound\r\n         * @method makeSound\r\n         */\r\n        makeSound: function (sound) {\r\n            this.emit('sound', this.getName(), sound);\r\n\r\n            console.log(this.getName() + \" says: \" + sound);\r\n        },\r\n\r\n        /**\r\n         * Gets the name of the pet\r\n         *\r\n         * @return {string}\r\n         */\r\n        getName: function () {\r\n            return this._name;\r\n        }\r\n\r\n        // ...\r\n        // Any other functions and values assigned to the prototype.\r\n\r\n        // These properties can be accessed after instantiation with ```petInstance.makeSound()```.\r\n\r\n        // You can also define here all values that should be available in instances of \"Pet\" that should be shared\r\n        // across all object instances.\r\n    },\r\n\r\n    /** @lends Pet */\r\n    { // Properties assigned to the constructor of \"Pet\"\r\n\r\n        /**\r\n         * @type {string}\r\n         */\r\n        TYPE: \"Pet\"\r\n\r\n        // ...\r\n        // Any other constructor functions and values.\r\n\r\n        // These properties can be accessed with ```Pet.TYPE```.\r\n    }\r\n);\r\n\r\n/**\r\n * @class Cat\r\n * @extends Pet\r\n */\r\nvar Cat = Pet.extend(\r\n\r\n    /**\r\n     * Constructor of Cat\r\n     *\r\n     * @constructor\r\n     * @param {string} name Name of pet\r\n     */\r\n    function (name) {\r\n        this.__super(\"cat\", name);\r\n    },\r\n\r\n    /** @lends Cat.prototype */\r\n    { // Properties assigned to the prototype of \"Cat\"\r\n        /**\r\n         * Make sound of cat\r\n         *\r\n         * @method makeSound\r\n         */\r\n        makeSound: function () {\r\n            this.__super(\"miau\");\r\n        }\r\n    },\r\n\r\n    /** @lends Cat */\r\n    { // Properties assigned to the constructor of \"Cat\"\r\n        /**\r\n         * @type {string}\r\n         */\r\n        TYPE: \"Cat\"\r\n    }\r\n);\r\n\r\n/**\r\n * @class Dog\r\n * @extends Pet\r\n */\r\nvar Dog = Pet.extend(\r\n\r\n    /**\r\n     * Constructor of Dog\r\n     *\r\n     * @constructor\r\n     * @param {string} name Name of pet\r\n     */\r\n        function (name) {\r\n        this.__super(\"dog\", name);\r\n    },\r\n\r\n    /** @lends Dog.prototype */\r\n    { // Properties assigned to the prototype of \"Dog\"\r\n        /**\r\n         * Make sound of cat\r\n         *\r\n         * @method makeSound\r\n         */\r\n        makeSound: function () {\r\n            this.__super(\"barf\");\r\n        }\r\n    },\r\n\r\n    /** @lends Dog */\r\n    { // Properties assigned to the constructor of \"Dog\"\r\n        /**\r\n         * @type {string}\r\n         */\r\n        TYPE: \"Dog\"\r\n    }\r\n);\r\n\r\nvar tomTheCat = new Cat(\"Tom\");\r\nvar zeusTheDog = new Dog(\"Zeus\");\r\n\r\n// Listen to events\r\ntomTheCat.on('sound', function (name, sound) {\r\n    console.log(\"The cat said \" + sound);\r\n});\r\nzeusTheDog.on('sound', function (name, sound) {\r\n    console.log(\"The dog said \" + sound);\r\n});\r\n\r\n// Make sounds\r\ntomTheCat.makeSound();\r\nzeusTheDog.makeSound();\r\n\r\n// Print instance identifier\r\nconsole.log(\"Cat object: \" + Cat.toString());\r\nconsole.log(\"Cat instance\", tomTheCat.toString());\r\n\r\nconsole.log(\"Dog object: \" + Dog.toString());\r\nconsole.log(\"Dog instance\", zeusTheDog.toString());\r\n```\r\n\r\n*Output:*\r\n```shell\r\nThe cat said miau\r\nTom says: miau\r\nThe dog said barf\r\nZeus says: barf\r\nCat object: [Cat]\r\nCat instance [Cat::cat:Tom(instance1)]\r\nDog object: [Dog]\r\nDog instance [Dog::dog:Zeus(instance2)]\r\n```\r\n\r\n---\r\n\r\n##Utils\r\n\r\nUtils exposes the following utility functions:\r\n\r\n###extendApply\r\nThis extend-function works like any other extend function, except it calls a function on each value and uses the result as value of a property.\r\n\r\nParameters:\r\n* ```obj``` {object} - Destination object to merge values into\r\n* ```objects``` {object[]} - Array of objects that should be copied into the ```obj```.\r\n* ```fn``` {function} - Function that returns a value that should be used in place of the original value. Every property in the objects of the ```objects``` parameter will call this function. This parameter is optional. Should no function be supplied, then the values will be used as-is.\r\n\r\nApply-Function Parameters:\r\n* ```srcValue``` {*} - The original value of a property that should be copied to the ```obj```.\r\n* ```dstValue``` {*} - Current value on the ```obj``` object.\r\n* ```options``` {object} - Additional options\r\n* ```options.key``` {string} - Name of the property that should be copied.\r\n* ```options.currentObject``` {object} _ The object currently processed from the ```objects``` list.\r\n* ```options.objectIndex``` {int} - The index of ```currentObject``` in the ```objects``` list.\r\n* ```options.valueIndex``` {int} - The index of the current property in ```currentObject```.\r\n\r\n####Example - Simple extend\r\n```javascript\r\nvar utils = require('../../').utils;\r\nvar result;\r\n\r\nvar obj1 = {\r\n    \"name\": \"obj1\",\r\n    \"entry1\": 23,\r\n    \"entry2\": 46\r\n};\r\n\r\nvar obj2 = {\r\n    \"name\": \"obj2\",\r\n    \"entry2\": 78,\r\n    \"entry3\": 2\r\n};\r\n\r\nvar srcObj = {\r\n    \"entry0\": 0\r\n};\r\n\r\n\r\nconsole.log(\"Simple extend:\");\r\nutils.extendApply(srcObj, [obj1, obj2]);\r\nconsole.log(srcObj);\r\n```\r\n\r\nOutput:\r\n```shell\r\nSimple extend:\r\n{ entry0: 0, name: 'obj2', entry1: 23, entry2: 78, entry3: 2 }\r\n```\r\n\r\n####Example - Extend with apply function\r\n```javascript\r\nconsole.log(\"Extend with function:\");\r\nresult = utils.extendApply({}, [obj1, obj2], function (value) {\r\n    return value + 1;\r\n});\r\nconsole.log(result);\r\n```\r\n\r\nOutput:\r\n```shell\r\nExtend with function:\r\n{ name: 'obj21', entry1: 24, entry2: 79, entry3: 3 }\r\n```\r\n\r\n####Example - Logging extend apply calls\r\n```javascript\r\nconsole.log(\"Extend logging:\");\r\nresult = utils.extendApply({}, [obj1, obj2], function (srcValue, dstValue, options) {\r\n\r\n    console.log(\"The value '\" + srcValue + \"' with key '\" + options.key + \"' from object with name '\" +\r\n        options.currentObject.name +  \"' was '\" + dstValue + \"' in the original object\");\r\n\r\n    return options.objectIndex + ':' + options.valueIndex;\r\n});\r\nconsole.log(result);\r\n```\r\n\r\nOutput:\r\n```shell\r\nExtend logging:\r\nThe value 'obj1' with key 'name' from object with name 'obj1' was 'undefined' in the original object\r\nThe value '23' with key 'entry1' from object with name 'obj1' was 'undefined' in the original object\r\nThe value '46' with key 'entry2' from object with name 'obj1' was 'undefined' in the original object\r\nThe value 'obj2' with key 'name' from object with name 'obj2' was '0:0' in the original object\r\nThe value '78' with key 'entry2' from object with name 'obj2' was '0:2' in the original object\r\nThe value '2' with key 'entry3' from object with name 'obj2' was 'undefined' in the original object\r\n{ name: '1:0', entry1: '0:1', entry2: '1:1', entry3: '1:2' }\r\n```\r\n___\r\n###deepExtend\r\nExtends an object with properties that will be recursively copied.\r\n\r\nParameters:\r\n* ```obj``` {object} - Destination object to merge values into\r\n* ```objects``` {object[]} - Array of objects that should be copied into the ```obj```.\r\n* ```options``` {object} - Additional options.\r\n* ```options.replace``` {boolean} - If set, then array entries in destination will be replaced instead of values appended to the destination list.\r\n\r\n####Example: Simple usage\r\n```javascript\r\nvar utils = require('preceptor-core').utils;\r\n\r\nvar obj1 = {\r\n    \"entry1\": [1, 2, 3],\r\n    \"entry2\": [5, 6],\r\n    \"entry4\": 23,\r\n    \"entry5\": {\r\n        \"entry6\": 22,\r\n        \"entry7\": 24,\r\n        \"entry8\": {\r\n            \"entry9\": 9\r\n        }\r\n    }\r\n};\r\n\r\nvar obj2 = {\r\n    \"entry2\": [8, 9],\r\n    \"entry3\": 2,\r\n    \"entry5\": {\r\n        \"entry7\": 21,\r\n        \"entry10\": 11\r\n    }\r\n};\r\n\r\nvar srcObj = {\r\n    \"entry0\": 0,\r\n    \"entry2\": [7],\r\n    \"entry5\": {\r\n        \"entry0\": \"zero\"\r\n    }\r\n};\r\n\r\nutils.deepExtend(srcObj, [obj1, obj2]);\r\nconsole.log(srcObj);\r\n```\r\n\r\nOutput:\r\n```shell\r\n{ entry0: 0,\r\n  entry2: [ 7, 5, 6, 8, 9 ],\r\n  entry5:\r\n   { entry0: 'zero',\r\n     entry6: 22,\r\n     entry7: 21,\r\n     entry8: { entry9: 9 },\r\n     entry10: 11 },\r\n  entry1: [ 1, 2, 3 ],\r\n  entry4: 23,\r\n  entry3: 2 }\r\n```\r\n\r\n####Example: Use with replace\r\n```javascript\r\nvar utils = require('preceptor-core').utils;\r\nvar result;\r\n\r\nresult = utils.deepExtend({}, [obj1, obj2], { replace: true });\r\nconsole.log(result);\r\n```\r\n\r\nOutput:\r\n```shell\r\n{ entry1: [ 1, 2, 3 ],\r\n    entry2: [ 8, 9 ],\r\n    entry4: 23,\r\n    entry5: { entry6: 22, entry7: 21, entry8: { entry9: 9 }, entry10: 11 },\r\n    entry3: 2 }\r\n```\r\n___\r\n###combine\r\nCombines multiple strings by applying a glue-string between them if they are not already available there. This is very similar to the ```path.join``` method, but it doesn't care what the structure of the rest or the string is.\r\n\r\nThis method is used with the ```extendApply``` function to give object methods the possibility to call the parent method with ```__super()```.\r\n\r\nParameters:\r\n* ```glue``` {string} - Glue string\r\n* ```str, ...``` {string} - Strings that should be glued.\r\n\r\n####Example: Simple usage\r\n```javascript\r\nvar utils = require('preceptor-core').utils;\r\n\r\nconsole.log(utils.combine('-', '', '', ''));\r\n// Output: -\r\n\r\nconsole.log(utils.combine('-', 'test1', 'test2'));\r\n// Output: test1-test2\r\n\r\nconsole.log(utils.combine('-', '-test1-', '-test2-'));\r\n// Output: -test1-test2-\r\n\r\nconsole.log(utils.combine('-', 'test1-', 'test2'));\r\n// Output: test1-test2\r\n\r\nconsole.log(utils.combine('-', 'test1', '-test2'));\r\n// Output: test1-test2\r\n```\r\n___\r\n\r\n###superWrapper\r\nFunction that creates a new function that sets the ```__super``` property up to be called from within a function body.\r\n\r\nParameters:\r\n* ```currentItem``` {*} - Value that should be used\r\n* ```previousItem``` {*} - Previous item value\r\n\r\n####Example: Simple usage\r\n```javascript\r\nvar utils = require('preceptor-core').utils;\r\n\r\nvar newFn = utils.superWrapper(function (value) {\r\n    this.__super(123, value);\r\n    console.log(\"Method test in object 2 and value \" + value);\r\n}, function (value1, value2) {\r\n    console.log(\"Method test in object 1 and values \" + value1 + \" and \" + value2);\r\n});\r\nnewFn(88);\r\n```\r\n\r\nOutput:\r\n```shell\r\nMethod test in object 1 and values 123 and 88\r\nMethod test in object 2 and value 88\r\n```\r\n\r\n####Example: Usage with extendApply\r\n```javascript\r\nvar utils = require('preceptor-core').utils;\r\n\r\nvar obj1 = {\r\n    test: function (value1, value2) {\r\n        console.log(\"Method test in object 1 and values \" + value1 + \" and \" + value2);\r\n    }\r\n};\r\n\r\nvar obj2 = {\r\n    test: function (value) {\r\n        this.__super(123, value);\r\n        console.log(\"Method test in object 2 and value \" + value);\r\n    }\r\n};\r\n\r\nvar result = utils.extendApply(obj1, [obj2], utils.superWrapper);\r\nresult.test(88);\r\n```\r\n\r\nOutput:\r\n```shell\r\nMethod test in object 1 and values 123 and 88\r\nMethod test in object 2 and value 88\r\n```\r\n\r\n---\r\n\r\n##API-Documentation\r\n\r\nGenerate the documentation with following command:\r\n```shell\r\nnpm run docs\r\n```\r\nThe documentation will be generated in the ```docs``` folder of the module root.\r\n\r\n##Tests\r\n\r\nRun the tests with the following command:\r\n```shell\r\nnpm run test\r\n```\r\nThe code-coverage will be written to the ```coverage``` folder in the module root.\r\n\r\n##Third-party libraries\r\n\r\nThe following third-party libraries are used by this module:\r\n\r\n###Dependencies\r\n* underscore: http://underscorejs.org\r\n\r\n###Dev-Dependencies\r\n* chai: http://chaijs.com\r\n* istanbul: https://github.com/gotwarlost/istanbul\r\n* mocha: https://github.com/visionmedia/mocha\r\n* yuidocjs: https://github.com/yui/yuidoc\r\n\r\n##License\r\n\r\nThe MIT License\r\n\r\nCopyright 2014 Yahoo Inc.\r\n","google":"https://github.com/yahoo/preceptor-core","note":"Don't delete this file! It's used internally to help with page regeneration."}